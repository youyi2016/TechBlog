{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{224:function(t,a,s){\"use strict\";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"子组件方法只允许执行一次\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#子组件方法只允许执行一次\"}},[t._v(\"#\")]),t._v(\" 子组件方法只允许执行一次\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"应用场景\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应用场景\"}},[t._v(\"#\")]),t._v(\" 应用场景\")]),t._v(\" \"),s(\"p\",[t._v(\"在初始化子组件时需要为某个元素绑定一个监听元素滚动条滚动的滚动事件。子组件只有在显示的时候才会获取相应的数据渲染。\")]),t._v(\" \"),s(\"p\",[t._v(\"如何实现让子组件显示出来并且 dom 加载完成之后去再去绑定滚动事件，且只执行一次。\")])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}